[{"/Users/norman/Desktop/project-ryde/frontend/src/index.js":"1","/Users/norman/Desktop/project-ryde/frontend/src/App.js":"2","/Users/norman/Desktop/project-ryde/frontend/src/components/NavBar.js":"3","/Users/norman/Desktop/project-ryde/frontend/src/screens/LoginScreen.js":"4","/Users/norman/Desktop/project-ryde/frontend/src/screens/DashboardScreen.js":"5","/Users/norman/Desktop/project-ryde/frontend/src/screens/RegisterScreen.js":"6"},{"size":219,"mtime":1617830702644,"results":"7","hashOfConfig":"8"},{"size":778,"mtime":1617830595060,"results":"9","hashOfConfig":"8"},{"size":1190,"mtime":1617828591565,"results":"10","hashOfConfig":"8"},{"size":2789,"mtime":1617830350888,"results":"11","hashOfConfig":"8"},{"size":163,"mtime":1617758100409,"results":"12","hashOfConfig":"8"},{"size":4594,"mtime":1617828597844,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1i98zva",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/norman/Desktop/project-ryde/frontend/src/index.js",[],["29","30"],"/Users/norman/Desktop/project-ryde/frontend/src/App.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/components/NavBar.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/screens/LoginScreen.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/screens/DashboardScreen.js",[],["31","32"],"/Users/norman/Desktop/project-ryde/frontend/src/screens/RegisterScreen.js",["33","34"],"import React, {useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios'\nimport { useScrollTrigger } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nexport default function RegisterScreen() {\n  const classes = useStyles();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  // const [isPassWrong, setIsPassWrong] = useState(false)\n  const handleOnSubmit = async () => {\n    // if(password !== confirmPassword){\n    //   setIsPassWrong(true)\n    // }\n    await axios.post('/api/register', {firstName, lastName, email, password})\n  }\n  return (\n    <Container component='main' maxWidth='xs'>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component='h1' variant='h5'>\n          Sign up\n        </Typography>\n        {/* {this.state.ifPassWrong ? <p>Sorry, the passwords dont match</p> : null} */}\n        <form className={classes.form} noValidate onSubmit={handleOnSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete='fname'\n                name='firstName'\n                variant='outlined'\n                required\n                fullWidth\n                id='firstName'\n                label='First Name'\n                autoFocus\n                onChange={e => setFirstName(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant='outlined'\n                required\n                fullWidth\n                id='lastName'\n                label='Last Name'\n                name='lastName'\n                autoComplete='lname'\n                onChange={e => setLastName(e.target.value)}\n\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                required\n                fullWidth\n                id='email'\n                label='Email Address'\n                name='email'\n                autoComplete='email'\n                onChange={e => setEmail(e.target.value)}\n\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                required\n                fullWidth\n                name='password'\n                label='Password'\n                type='password'\n                id='password'\n                autoComplete='current-password'\n                onChange={e => setPassword(e.target.value)}\n\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                required\n                fullWidth\n                name='confirmPassword'\n                label='Confirm Password'\n                type='password'\n                id='confirmPassword'\n                onChange={e => setConfirmPassword(e.target.value)}\n\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type='submit'\n            fullWidth\n            variant='contained'\n            color='primary'\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify='flex-end'>\n            <Grid item>\n              <Link href='/login' variant='body2'>\n                Already have an account?\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"35","replacedBy":"39"},{"ruleId":"37","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":13,"column":10,"nodeType":"43","messageId":"44","endLine":13,"endColumn":26},{"ruleId":"41","severity":1,"message":"45","line":41,"column":10,"nodeType":"43","messageId":"44","endLine":41,"endColumn":25},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],["46"],["47"],"no-unused-vars","'useScrollTrigger' is defined but never used.","Identifier","unusedVar","'confirmPassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]