[{"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\index.js":"1","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\App.js":"2","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\reducers\\index.js":"3","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\LoginScreen.js":"4","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\RegisterScreen.js":"5","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\DatasetScreen.js":"6","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\ProjectsScreen.js":"7","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\DashboardScreen.js":"8","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\NavBar.js":"9","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\reducers\\authReducer.js":"10","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\actions\\index.js":"11","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\CreateProject.js":"12","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\ProjectTable.js":"13","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\CreateHardware.js":"14","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\HardwareTable.js":"15","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\Album.js":"16","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\Carousel.js":"17"},{"size":547,"mtime":1620076045804,"results":"18","hashOfConfig":"19"},{"size":1167,"mtime":1620076045800,"results":"20","hashOfConfig":"19"},{"size":146,"mtime":1620076045805,"results":"21","hashOfConfig":"19"},{"size":3112,"mtime":1620076045807,"results":"22","hashOfConfig":"19"},{"size":5969,"mtime":1620077585245,"results":"23","hashOfConfig":"19"},{"size":6513,"mtime":1620076045806,"results":"24","hashOfConfig":"19"},{"size":21330,"mtime":1620078136286,"results":"25","hashOfConfig":"19"},{"size":415,"mtime":1620076045806,"results":"26","hashOfConfig":"19"},{"size":2618,"mtime":1620076045803,"results":"27","hashOfConfig":"19"},{"size":181,"mtime":1620076045805,"results":"28","hashOfConfig":"19"},{"size":187,"mtime":1620076045801,"results":"29","hashOfConfig":"19"},{"size":4696,"mtime":1620076045802,"results":"30","hashOfConfig":"19"},{"size":4119,"mtime":1620076045803,"results":"31","hashOfConfig":"19"},{"size":4682,"mtime":1620076045802,"results":"32","hashOfConfig":"19"},{"size":3245,"mtime":1620076045803,"results":"33","hashOfConfig":"19"},{"size":2568,"mtime":1620076045806,"results":"34","hashOfConfig":"19"},{"size":1674,"mtime":1620076045802,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"4kgxsw",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\index.js",[],["75","76"],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\App.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\reducers\\index.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\RegisterScreen.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\DatasetScreen.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\ProjectsScreen.js",["77","78","79"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  TableCell,\r\n  TableRow,\r\n  TableBody,\r\n  Table,\r\n  TableHead,\r\n  TableContainer,\r\n  Paper,\r\n  TextField,\r\n  MenuItem,\r\n  Input,\r\n  IconButton,\r\n  Collapse\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Alert } from '@material-ui/lab';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport CreateProject from '../components/CreateProject';\r\nimport CreateHardware from '../components/CreateHardware';\r\nimport ProjectTable from '../components/ProjectTable';\r\nimport HardwareTable from '../components/HardwareTable';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\nexport const getProjectsMirror = async () => {\r\n  await axios.get('/api/projects/all').then(projects => {\r\n    return projects.data;\r\n  });\r\n}\r\nexport const getHardwaresMirror = async () => {\r\n  \r\n}\r\nexport const getFirstHardwareMirror = async (_id) => {\r\n  let hardware = await axios.get('/api/checked/hardware/' + _id);\r\n  return hardware.data[0];\r\n}\r\n\r\nconst ProjectsScreen = props => {\r\n  const classes = useStyles();\r\n  const [projects, setProjects] = useState([]);\r\n  const [hardwares, setHardwares] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [openedProject, setOpenedProject] = useState({});\r\n  const [openedProjectAddedUsers, setOpenedProjectAddedUsers] = useState([]);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [openedProjectHardware, setOpenedProjectHardware] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [openedMessage, setOpenedMessage] = useState(false);\r\n  //On open of project, for checking in and out hardware sets (dropdown menu)\r\n  const [hardwareDropDown, setHardwareDropDown] = useState('');\r\n  const [userDropDown, setUserDropDown] = useState('');\r\n  const [hardwareQty, setHardwareQty] = useState('');\r\n  const [addMoreFunds, setAddMoreFunds] = useState('');\r\n  useEffect(() => {\r\n    if (errorMessage !== '') {\r\n      setSuccessMessage('');\r\n    } else if (successMessage !== '') {\r\n      setErrorMessage('');\r\n    }\r\n  }, [errorMessage, successMessage]);\r\n  const resetOnClose = () => {\r\n    setHardwareDropDown('');\r\n    setHardwareQty('');\r\n    setErrorMessage('');\r\n    setSuccessMessage('');\r\n    setOpenModal(false);\r\n    setOpenedMessage(false);\r\n    fetchAllProjects();\r\n    fetchAllHardwares();\r\n  };\r\n  const handleCheckIn = () => {\r\n    let checkedOutElement = '';\r\n    let checkedOutQty = 0;\r\n    let checkedOutEntireElement = null;\r\n    openedProjectHardware.forEach(element => {\r\n      if (element.hardware._id === hardwareDropDown) {\r\n        checkedOutElement = element._id;\r\n        checkedOutEntireElement = element;\r\n        checkedOutQty = element.checkedOut;\r\n      }\r\n    });\r\n    if (checkedOutQty < Number(hardwareQty)) {\r\n      console.log('Project dos not own enough sets.');\r\n      setSuccessMessage('');\r\n      setErrorMessage('Project does not own enough sets.');\r\n    } else if (Number(hardwareQty) < 0) {\r\n      console.log('Please enter a value of at least 1.');\r\n      setSuccessMessage('');\r\n      setErrorMessage('Please enter a value of at least 1.');\r\n    } else {\r\n      setErrorMessage('');\r\n      setSuccessMessage('Successfully updated.');\r\n      axios.post('/api/projects/checkin', {\r\n        hardwareId: hardwareDropDown,\r\n        checkedId: checkedOutElement,\r\n        projectId: openedProject._id,\r\n        qty: Number(hardwareQty),\r\n        fundsPer: checkedOutEntireElement.hardware.fundsPer\r\n      });\r\n    }\r\n    setOpenedMessage(true);\r\n  };\r\n  const handleCheckOut = async () => {\r\n    let checkedOutElement = '';\r\n    let checkedOutEntireElement = null;\r\n    let hardwareQtyAvailable = 0;\r\n    openedProjectHardware.forEach(element => {\r\n      if (element.hardware._id === hardwareDropDown) {\r\n        checkedOutElement = element._id;\r\n        checkedOutEntireElement = element;\r\n        hardwareQtyAvailable = element.hardware.available;\r\n      }\r\n    });\r\n    console.log(hardwareQtyAvailable, hardwareQty);\r\n    if (hardwareQtyAvailable < Number(hardwareQty)) {\r\n      console.log('Not enough hardware sets to check out.');\r\n      setSuccessMessage('');\r\n      setErrorMessage('Not enough hardware sets to check out.');\r\n    } else if (Number(hardwareQty) < 0) {\r\n      console.log('Please enter a value of at least 1.');\r\n      setSuccessMessage('');\r\n      setErrorMessage('Please enter a value of at least 1.');\r\n    } else if (checkedOutEntireElement.hardware.fundsPer * Number(hardwareQty) > openedProject.funds) {\r\n      setSuccessMessage('');\r\n      setErrorMessage('Not enough funds!');\r\n    } else {\r\n      setErrorMessage('');\r\n      setSuccessMessage('Successfully updated.');\r\n\r\n      await axios.post('/api/projects/checkout', {\r\n        hardwareId: hardwareDropDown,\r\n        checkedId: checkedOutElement,\r\n        projectId: openedProject._id,\r\n        qty: Number(hardwareQty),\r\n        fundsPer: checkedOutEntireElement.hardware.fundsPer\r\n      });\r\n    }\r\n    setOpenedMessage(true);\r\n  };\r\n  const handleAddMoreFunds = () => {\r\n    // current value in addMoreFunds\r\n    // current project in openedProject\r\n    if (Number(addMoreFunds) <= 0) {\r\n      setSuccessMessage('');\r\n      setErrorMessage('Please enter a value of at least 1.');\r\n    }\r\n    else {\r\n      setErrorMessage('');\r\n      setSuccessMessage('Successfully updated funds.');\r\n      axios.post('/api/projects/addFunds', {\r\n        funds: addMoreFunds,\r\n        id: openedProject._id\r\n      });\r\n    }\r\n    setAddMoreFunds('');\r\n    setOpenedMessage(true);\r\n    window.location.reload(false);\r\n  }\r\n\r\n  const handleAddUser = () => {\r\n    console.log(userDropDown)\r\n    if (openedProject.projectUsers.includes(userDropDown)) {\r\n      setSuccessMessage('');\r\n      setErrorMessage('User already added to project');\r\n    }\r\n    else {\r\n      setErrorMessage('');\r\n      setSuccessMessage('User added to project.');\r\n      axios.post('/api/projects/addUser', {\r\n        userToAdd: userDropDown,\r\n        id: openedProject._id\r\n      });\r\n    }\r\n    setUserDropDown('')\r\n    setOpenedMessage(true)\r\n  }\r\n  const fetchAllProjects = async () => {\r\n    await axios.get('/api/projects/all').then(projects => {\r\n      setProjects(projects.data);\r\n    });\r\n  };\r\n  const fetchAllHardwares = async () => {\r\n    await axios.get('/api/hardware/all').then(hardware => {\r\n      setHardwares(hardware.data);\r\n    });\r\n  };\r\n  const fetchAllUsers = async () => {\r\n    await axios.get('/api/user/all').then(fetchedUsers => {\r\n      setUsers(fetchedUsers);\r\n    });\r\n  }\r\n  const onOpenProject = async project => {\r\n    setHardwareDropDown('');\r\n    setHardwareQty('');\r\n    fetchAllHardwares();\r\n    fetchAllUsers();\r\n    //Gets all of the current opened project's hardware ids\r\n    const projectHardwareIds = project.checkedOut.map(\r\n      element => element.hardware\r\n    );\r\n\r\n    //Gets all of the users for openedProject\r\n    setOpenedProjectAddedUsers(project.projectUsers)\r\n\r\n    //Gets all of the hardware ids available\r\n    const hardwareIds = hardwares.map(element => element._id);\r\n    let missingHardwareIds = [];\r\n    let removedHardwareIds = [];\r\n    let missingHardwareSets = [];\r\n\r\n    //Finds which new hardware sets appeared after creation of project under missingHardwareIds\r\n    hardwareIds.forEach(id => {\r\n      if (!projectHardwareIds.includes(id)) {\r\n        missingHardwareIds.push(id);\r\n      }\r\n    });\r\n    //Finds which hardware sets were deleted after creation of project under removedHardwareIds\r\n    projectHardwareIds.forEach(id => {\r\n      if (!hardwareIds.includes(id)) {\r\n        removedHardwareIds.push(id);\r\n      }\r\n    });\r\n    missingHardwareIds.forEach(id => {\r\n      hardwares.forEach(hardware => {\r\n        if (id === hardware._id) {\r\n          missingHardwareSets.push(hardware);\r\n        }\r\n      });\r\n    });\r\n    //console.log(missingHardwareSets);\r\n    if (missingHardwareSets) {\r\n      const checkedOut = await axios.post('/api/checked/create', {\r\n        hardwareSets: missingHardwareSets\r\n      });\r\n      const checkedOutArray = project.checkedOut;\r\n      checkedOut.data.forEach(data => checkedOutArray.push(data));\r\n      await axios.post('/api/projects/addHardware', {\r\n        checkedOut: checkedOutArray,\r\n        id: project._id\r\n      });\r\n    }\r\n    if (removedHardwareIds) {\r\n      const checkedOutArray = project.checkedOut;\r\n      //Remove objects that are inside removedHardwareIds\r\n      removedHardwareIds.forEach(removedId => {\r\n        checkedOutArray.forEach((checked, index) => {\r\n          if (checked.hardware === removedId) {\r\n            checkedOutArray.splice(index, 1);\r\n          }\r\n        });\r\n      });\r\n      await axios.post('/api/projects/addHardware', {\r\n        checkedOut: checkedOutArray,\r\n        id: project._id\r\n      });\r\n    }\r\n    setOpenModal(true);\r\n    setOpenedProject(project);\r\n    let hardwareArray = project.checkedOut.map(async ({ _id }) => {\r\n      let hardware = await axios.get('/api/checked/hardware/' + _id);\r\n      return hardware.data[0];\r\n    });\r\n    await Promise.all(hardwareArray).then(res => setOpenedProjectHardware(res));\r\n  };\r\n  const handleButtonDisable = (creator) => {\r\n    // console.log(\"creator\", creator)\r\n    // console.log(\"props.auth\", props.auth)\r\n    // console.log(\"props.auth.admin\", props.auth.admin)\r\n    // console.log(\"props.auth.email\", props.auth.email)\r\n    // console.log(\"props.auth && props.auth.admin =\", props.auth && props.auth.admin)\r\n    // console.log(\"creator === props.auth.email =\", creator === props.auth.email)\r\n    // console.log(\"openedProjectAddedUsers\", openedProjectAddedUsers)\r\n    // console.log(\"props.auth._id\", props.auth._id)\r\n    if (props.auth && props.auth.admin) {\r\n      return false;\r\n    } else if (creator === props.auth.email) {\r\n      return false;\r\n    }\r\n    else if (openedProjectAddedUsers.includes(props.auth._id)) {\r\n      return false;\r\n    }\r\n    else {\r\n      return true;\r\n    }\r\n  };\r\n  const renderHardwareCheckout = () => {\r\n    return (\r\n      <>\r\n        <div>\r\n          <Paper className={classes.paper}>\r\n            <TableContainer component={Paper}>\r\n              <Table aria-label='simple table'>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell align='center'>Set</TableCell>\r\n                    <TableCell align='center'>Quantity</TableCell>\r\n                    <TableCell align='center'>Check In</TableCell>\r\n                    <TableCell align='center'>Check Out</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell align='center'>\r\n                      <TextField\r\n                        select\r\n                        style={{ width: '100%' }}\r\n                        onChange={e => setHardwareDropDown(e.target.value)}\r\n                      >\r\n                        {openedProjectHardware.map(option => (\r\n                          <MenuItem\r\n                            key={option.hardware._id}\r\n                            value={option.hardware._id}\r\n                          >\r\n                            {option.hardware.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </TableCell>\r\n                    <TableCell align='center'>\r\n                      <Input\r\n                        type='number'\r\n                        onChange={e => setHardwareQty(e.target.value)}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align='center'>\r\n                      <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        disabled={hardwareDropDown === '' || hardwareQty === '' || handleButtonDisable(openedProject.creator)}\r\n                        onClick={handleCheckIn}\r\n                      >\r\n                        Check In\r\n                      </Button>\r\n                    </TableCell>\r\n                    <TableCell align='center'>\r\n                      <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        disabled={hardwareDropDown === '' || hardwareQty === '' || handleButtonDisable(openedProject.creator)}\r\n                        onClick={handleCheckOut}\r\n                      >\r\n                        Check Out\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableHead >\r\n                  <TableRow align=\"center\">\r\n                    <TableCell align='center'>\r\n                      <b>Current Funds: {openedProject.funds}</b>\r\n                    </TableCell>\r\n                    <TableCell align='center'>\r\n                      <Input\r\n                        type='number'\r\n                        placeholder='Add More Funds'\r\n                        onChange={e => setAddMoreFunds(e.target.value)}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align='center'>\r\n                      <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={handleAddMoreFunds}\r\n                        disabled={addMoreFunds == '' || handleButtonDisable(openedProject.creator)}\r\n                      >\r\n                        Add Funds to Project\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableHead >\r\n                  <TableRow align=\"center\">\r\n                    <TableCell align='center'>\r\n                      <p>Number of users: {users.data.length}</p>\r\n                    </TableCell>\r\n                    <TableCell align='center'>\r\n                      <TextField\r\n                        select\r\n                        style={{ width: '100%' }}\r\n                        onChange={e => setUserDropDown(e.target.value)}\r\n                      >\r\n                        {users.data.map(user => (\r\n                          <MenuItem\r\n                            key={user._id}\r\n                            value={user._id}\r\n                          >\r\n                            {user.firstName}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </TableCell>\r\n                    <TableCell align='center'>\r\n                      <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={handleAddUser}\r\n                        disabled={userDropDown == '' || handleButtonDisable(openedProject.creator)}\r\n                      >\r\n                        Add User to Project\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n              </Table>\r\n            </TableContainer>\r\n          </Paper>\r\n        </div>\r\n        <div style={{ paddingTop: '1rem' }}>\r\n          {errorMessage ? (\r\n            <Collapse in={openedMessage}>\r\n              <Alert\r\n                style={{\r\n                  width: '50%',\r\n                  justifyContent: 'center',\r\n                  margin: 'auto'\r\n                }}\r\n                action={\r\n                  <IconButton\r\n                    aria-label='close'\r\n                    color='inherit'\r\n                    size='small'\r\n                    onClick={() => {\r\n                      setOpenedMessage(false);\r\n                    }}\r\n                  >\r\n                    <CloseIcon fontSize='inherit' />\r\n                  </IconButton>\r\n                }\r\n                severity='error'\r\n              >\r\n                {errorMessage}\r\n              </Alert>\r\n            </Collapse>\r\n          ) : null}\r\n          {successMessage ? (\r\n            <Collapse in={openedMessage}>\r\n              <Alert\r\n                style={{\r\n                  width: '50%',\r\n                  justifyContent: 'center',\r\n                  margin: 'auto'\r\n                }}\r\n                action={\r\n                  <IconButton\r\n                    aria-label='close'\r\n                    color='inherit'\r\n                    size='small'\r\n                    onClick={() => {\r\n                      setOpenedMessage(false);\r\n                    }}\r\n                  >\r\n                    <CloseIcon fontSize='inherit' />\r\n                  </IconButton>\r\n                }\r\n                severity='success'\r\n              >\r\n                {successMessage}\r\n              </Alert>\r\n            </Collapse>\r\n          ) : null}\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n  const renderHardwareSets = () => {\r\n    let res = [];\r\n    res.push(renderHardwareCheckout());\r\n    openedProjectHardware.forEach(element => {\r\n      res.push(\r\n        <Paper className={classes.paper}>\r\n          <TableContainer component={Paper}>\r\n            <Table aria-label='simple table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align='center'>Name</TableCell>\r\n                  <TableCell align='center'>Funds Per Hardware</TableCell>\r\n                  <TableCell align='center'>Available</TableCell>\r\n                  <TableCell align='center'>Checked Out</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell align='center'>{element.hardware.name}</TableCell>\r\n                  <TableCell align='center'>{element.hardware.fundsPer}</TableCell>\r\n                  <TableCell align='center'>\r\n                    {element.hardware.available > 10 ? (\r\n                      <Typography style={{ color: 'green' }}>\r\n                        {element.hardware.available}\r\n                      </Typography>\r\n                    ) : (\r\n                      <Typography style={{ color: 'red' }}>\r\n                        {element.hardware.available}\r\n                      </Typography>\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align='center'>{element.checkedOut}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody></TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      );\r\n    });\r\n    return res;\r\n  };\r\n  useEffect(async () => {\r\n    fetchAllProjects();\r\n    fetchAllHardwares();\r\n  }, [props.auth]);\r\n  return (\r\n    <Grid container spacing={1}>\r\n      {!props.auth ? <Redirect to='/login' /> : <Redirect to='/projects' />}\r\n\r\n      <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n          <Grid item xs={4}>\r\n            <CreateProject fetchAllProjects={fetchAllProjects} />\r\n            {props.auth && props.auth.admin && (\r\n              <CreateHardware fetchAllHardwares={fetchAllHardwares} />\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <ProjectTable\r\n              projects={projects}\r\n              onOpenProject={onOpenProject}\r\n              fetchAllProjects={fetchAllProjects}\r\n            />\r\n            {props.auth && props.auth.admin && (\r\n              <HardwareTable\r\n                hardwares={hardwares}\r\n                fetchAllHardwares={fetchAllHardwares}\r\n              />\r\n            )}\r\n          </Grid>\r\n        </React.Fragment>\r\n      </Grid>\r\n\r\n      {openModal ? (\r\n        <Dialog\r\n          maxWidth='md'\r\n          fullWidth\r\n          open={openModal}\r\n          onClose={() => setOpenModal(false)}\r\n          aria-labelledby='form-dialog-title'\r\n        >\r\n          <AppBar\r\n            position='static'\r\n            style={{\r\n              paddingTop: '1rem',\r\n              paddingBottom: '1rem',\r\n              alignItems: 'center'\r\n            }}\r\n          >\r\n            <Typography align='center'>\r\n              {openedProject.projectName} - {openedProject.creator}\r\n            </Typography>\r\n          </AppBar>\r\n          <DialogContent>\r\n            <Typography variant='h5' align='center'>\r\n              Project Description\r\n            </Typography>\r\n            <Typography align='center'>{openedProject.description}</Typography>\r\n            <hr />\r\n          </DialogContent>\r\n          <DialogContent>\r\n            <Typography\r\n              variant='h5'\r\n              align='center'\r\n              style={{ paddingTop: '2rem' }}\r\n            >\r\n              Hardware Sets\r\n            </Typography>\r\n\r\n            {renderHardwareSets()}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={resetOnClose} color='primary'>\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      ) : null}\r\n    </Grid>\r\n  );\r\n};\r\nconst mapStateToProps = state => {\r\n  return { auth: state.auth };\r\n};\r\nexport default connect(mapStateToProps)(ProjectsScreen);\r\n","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\DashboardScreen.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\NavBar.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\reducers\\authReducer.js",["80"],"export default function(state = null, action) {\r\n  switch (action.type) {\r\n    case 'FETCH_USER':\r\n      return action.payload || false;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\actions\\index.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\CreateProject.js",["81"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Button,\r\n  Snackbar,\r\n  Typography,\r\n  Paper,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  }\r\n}));\r\nconst CreateProject = ({ auth, fetchAllProjects }) => {\r\n  const classes = useStyles();\r\n\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [funds, setFunds] = useState('')\r\n  const errorMessage = 'Please fill out all fields.';\r\n  const successMessage = 'Project created!';\r\n  const [successSnackbarOpen, setSuccessSnackbarOpen] = useState(false);\r\n  const [errorSnackbarOpen, setErrorSnackbarOpen] = useState(false);\r\n\r\n  const [hardwareSets, setHardwareSets] = useState([]);\r\n  useEffect(async () => {\r\n    const res = await axios.get('/api/hardware/all');\r\n    setHardwareSets(res.data);\r\n  }, [auth]);\r\n  const handleOnSubmit = async () => {\r\n    if (name !== '' && description !== '') {\r\n      const checkedOut = await axios.post('/api/checked/create', {\r\n        hardwareSets\r\n      });\r\n      await axios.post('/api/projects/create', {\r\n        projectName: name,\r\n        description,\r\n        funds: Number(funds),\r\n        checkedOut: checkedOut.data,\r\n        creator: auth.email\r\n      });\r\n      fetchAllProjects();\r\n      setName('');\r\n      setDescription('');\r\n      setFunds('')\r\n      setSuccessSnackbarOpen(true);\r\n    } else {\r\n      setErrorSnackbarOpen(true);\r\n    }\r\n  };\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      <AppBar\r\n        position='static'\r\n        style={{\r\n          paddingTop: '0.5rem',\r\n          paddingBottom: '0.5rem',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <Typography variant='h6'>Create New Project</Typography>\r\n      </AppBar>\r\n\r\n      <TextField\r\n        variant='filled'\r\n        margin='normal'\r\n        required\r\n        id='Project Name'\r\n        label='Project Name'\r\n        name='Project Name'\r\n        style={{ width: '75%' }}\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n      />\r\n      <TextField\r\n        variant='filled'\r\n        margin='normal'\r\n        required\r\n        id='Project Description'\r\n        label='Project Description'\r\n        name='Project Description'\r\n        style={{ width: '75%' }}\r\n        value={description}\r\n        onChange={e => setDescription(e.target.value)}\r\n      />\r\n      <TextField\r\n        variant='filled'\r\n        margin='normal'\r\n        required\r\n        id='Funds'\r\n        label='Funds'\r\n        name='Funds'\r\n        style={{ width: '75%' }}\r\n        value={funds}\r\n        onChange={e => setFunds(e.target.value)}\r\n      />\r\n      <Button\r\n        onClick={handleOnSubmit}\r\n        style={{ paddingTop: 15, paddingBottom: 15 }}\r\n      >\r\n        Create New Project <AddToPhotosIcon />\r\n      </Button>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left'\r\n        }}\r\n        open={successSnackbarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={() => setSuccessSnackbarOpen(false)}\r\n        message={successMessage}\r\n        action={\r\n          <React.Fragment>\r\n            <IconButton\r\n              size='small'\r\n              aria-label='close'\r\n              color='inherit'\r\n              onClick={() => setSuccessSnackbarOpen(false)}\r\n            >\r\n              <CloseIcon fontSize='small' />\r\n            </IconButton>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left'\r\n        }}\r\n        open={errorSnackbarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={() => setErrorSnackbarOpen(false)}\r\n        message={errorMessage}\r\n        action={\r\n          <React.Fragment>\r\n            <IconButton\r\n              size='small'\r\n              aria-label='close'\r\n              color='inherit'\r\n              onClick={() => setErrorSnackbarOpen(false)}\r\n            >\r\n              <CloseIcon fontSize='small' />\r\n            </IconButton>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\nconst mapStateToProps = state => {\r\n  return { auth: state.auth };\r\n};\r\nexport default connect(mapStateToProps)(CreateProject);\r\n","C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\ProjectTable.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\CreateHardware.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\HardwareTable.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\screens\\Album.js",[],"C:\\Harish\\Electrical Engineering\\EE 461L\\project-ryde-new\\project-ryde\\frontend\\src\\components\\Carousel.js",["82"],"\r\nimport React from \"react\";\r\nimport { Carousel } from \"react-responsive-carousel\";\r\n\r\nexport default () => (\r\n    <Carousel autoPlay thumbWidth={80} width={'40%'}>\r\n        <div>\r\n            <img alt=\"\" src=\"https://media-exp1.licdn.com/dms/image/C4E03AQG6_Xy1u4twLg/profile-displayphoto-shrink_800_800/0/1556049038463?e=1625702400&v=beta&t=mcUSq_dqZNuKV0jWn6Mbr9naOLfL5K053JSurn_c9Ss\" />\r\n            <p className=\"legend\">Dhiraj Manukonda</p>\r\n        </div>\r\n        <div>\r\n            <img alt=\"\" src=\"https://media-exp1.licdn.com/dms/image/C4E03AQHUn7aNPwBBrw/profile-displayphoto-shrink_800_800/0/1555923412664?e=1625702400&v=beta&t=EUG7vTR5ekaR5HPqgMPJO4LDGYRXxEOtKWdPOf_AED0\" />\r\n            <p className=\"legend\">Yash Dhaduti</p>\r\n        </div>\r\n        <div>\r\n            <img alt=\"\" src=\"https://media-exp1.licdn.com/dms/image/C4E03AQGvZK3cNeX8nA/profile-displayphoto-shrink_800_800/0/1581045263143?e=1625702400&v=beta&t=1bmPmNDcMkAk0rQikhueEwSJhGOnbwr9kZuzrc9WhEM\" />\r\n            <p className=\"legend\">Stephen Chang</p>\r\n        </div>\r\n        <div>\r\n            <img alt=\"\" src=\"https://media-exp1.licdn.com/dms/image/C4E03AQFE0QEu3-GKVg/profile-displayphoto-shrink_800_800/0/1567572458509?e=1625702400&v=beta&t=ubgUNSmPWVZVBuZDt8Et9LamtzlhnjdPHX-xDaE6k2E\" />\r\n            <p className=\"legend\">Norman Wang</p>\r\n        </div>\r\n        <div>\r\n            <img alt=\"\" src=\"https://media-exp1.licdn.com/dms/image/C4E03AQHKIWTu9P5Nbg/profile-displayphoto-shrink_800_800/0/1581404924751?e=1625702400&v=beta&t=J2UNjD_cUXgRpg6yuopouUoXIFkw4eOTkAj5aT4HDMs\" />\r\n            <p className=\"legend\">Harish Rajanala</p>\r\n        </div>\r\n        \r\n    </Carousel>\r\n);\r\n",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":380,"column":48,"nodeType":"89","messageId":"90","endLine":380,"endColumn":50},{"ruleId":"87","severity":1,"message":"88","line":413,"column":48,"nodeType":"89","messageId":"90","endLine":413,"endColumn":50},{"ruleId":"91","severity":1,"message":"92","line":521,"column":13,"nodeType":"93","endLine":524,"endColumn":4},{"ruleId":"94","severity":1,"message":"95","line":1,"column":1,"nodeType":"96","endLine":8,"endColumn":2},{"ruleId":"91","severity":1,"message":"92","line":40,"column":13,"nodeType":"93","endLine":43,"endColumn":4},{"ruleId":"94","severity":1,"message":"97","line":5,"column":1,"nodeType":"96","endLine":29,"endColumn":3},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]