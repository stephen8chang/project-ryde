[{"/Users/norman/Desktop/project-ryde/frontend/src/index.js":"1","/Users/norman/Desktop/project-ryde/frontend/src/App.js":"2","/Users/norman/Desktop/project-ryde/frontend/src/reducers/index.js":"3","/Users/norman/Desktop/project-ryde/frontend/src/screens/DatasetScreen.js":"4","/Users/norman/Desktop/project-ryde/frontend/src/screens/DashboardScreen.js":"5","/Users/norman/Desktop/project-ryde/frontend/src/screens/ProjectsScreen.js":"6","/Users/norman/Desktop/project-ryde/frontend/src/screens/RegisterScreen.js":"7","/Users/norman/Desktop/project-ryde/frontend/src/screens/LoginScreen.js":"8","/Users/norman/Desktop/project-ryde/frontend/src/components/NavBar.js":"9","/Users/norman/Desktop/project-ryde/frontend/src/reducers/authReducer.js":"10","/Users/norman/Desktop/project-ryde/frontend/src/actions/index.js":"11"},{"size":526,"mtime":1617923296323,"results":"12","hashOfConfig":"13"},{"size":1155,"mtime":1617986681406,"results":"14","hashOfConfig":"13"},{"size":140,"mtime":1617923296324,"results":"15","hashOfConfig":"13"},{"size":4358,"mtime":1617953466446,"results":"16","hashOfConfig":"13"},{"size":386,"mtime":1617953438659,"results":"17","hashOfConfig":"13"},{"size":9902,"mtime":1617953478560,"results":"18","hashOfConfig":"13"},{"size":4993,"mtime":1617953079910,"results":"19","hashOfConfig":"13"},{"size":2995,"mtime":1617952926779,"results":"20","hashOfConfig":"13"},{"size":2420,"mtime":1617953283691,"results":"21","hashOfConfig":"13"},{"size":173,"mtime":1617923296324,"results":"22","hashOfConfig":"13"},{"size":181,"mtime":1617949151336,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1xafguk",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/Users/norman/Desktop/project-ryde/frontend/src/index.js",[],["52","53"],"/Users/norman/Desktop/project-ryde/frontend/src/App.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/reducers/index.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/screens/DatasetScreen.js",["54"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nconst DatasetScreen = props => {\n  return (\n    <div>\n      <table>\n        <tr>\n          <th>Dataset</th>\n          <th>Authors</th>\n          <th>Description</th>\n          <th>Download Link</th>\n        </tr>\n        <tr>\n          <td>Abdominal and Direct Fetal ECG Database</td>\n          <td>Jezewski, Matonia</td>\n          <td>\n            The configuration of the abdominal electrodes comprised four\n            electrodes placed around the navel, a reference electrode placed\n            above the pubic symphysis and a common mode reference electrode\n            (with active-ground signal) placed on the left leg. To reduce the\n            skin impedance, the areas under the Ag-AgCl electrodes were abraded.\n            In all cases, the scalp electrode was placed for a clinical\n            indication and all women consented to participate in this study.\n          </td>\n          <td>\n            <Link to='/data1.zip' target='_blank' download>\n              data1.zip\n            </Link>\n          </td>\n        </tr>\n        <tr>\n          <td>AF Termination Challenge Database</td>\n          <td>George Moody</td>\n          <td>\n            This database of two-channel ECG recordings has been created for use\n            in the Computers in Cardiology Challenge 2004, an open competition\n            with the goal of developing automated methods for predicting\n            spontaneous termination of atrial fibrillation (AF). See the\n            challenge announcement for information about the competition.\n          </td>\n          <td>\n            <Link to='/data2.zip' target='_blank' download>\n              data2.zip\n            </Link>\n          </td>\n        </tr>\n        <tr>\n          <td>AHA Database Sample Excluded Record</td>\n          <td>Goldberger, Amaral</td>\n          <td>\n            The American Heart Association (AHA), with funding from the National\n            Heart, Lung, and Blood Institute (NHLBI), sponsored the development\n            of the AHA Database for Evaluation of Ventricular Arrhythmia\n            Detectors during the late 1970s and early 1980s at Washington\n            University (St. Louis). The first portions of the AHA Database were\n            released in 1982, and it was completed in 1985. No revisions or\n            updates were made subsequently, although ECRI has distributed the\n            database in several different formats.\n          </td>\n          <td>\n            <Link to='/data3.zip' target='_blank' download>\n              data3.zip\n            </Link>\n          </td>\n        </tr>\n        <tr>\n          <td>ANSI/AAMI EC13 Test Waveforms</td>\n          <td>Goldberger, Amaral</td>\n          <td>\n            The files in this set can be used for testing a variety of devices\n            that monitor the electrocardiogram. The recordings include both\n            synthetic and real waveforms. For details on these test waveforms\n            and how to use them, please refer to section 5.1.2.1, paragraphs (e)\n            and (g) in the reference below.\n          </td>\n          <td>\n            <Link to='/data4.zip' target='_blank' download>\n              data4.zip\n            </Link>\n          </td>\n        </tr>\n        <tr>\n          <td>Blood Pressure in Salt-Sensitive Dahl Rats</td>\n          <td>Bugenhagen, Cowley</td>\n          <td>\n            Salt-sensitive hypertension is known to be associated with\n            dysfunction of the baroreflex control system in the Dahl\n            salt-sensitive (SS) rat. However, neither the physiological\n            mechanisms nor the genomic regions underlying the baroreflex\n            dysfunction seen in this rat model are definitively known. Here, we\n            have adopted a mathematical modeling approach to investigate the\n            physiological and genetic origins of baroreflex dysfunction in the\n            Dahl SS rat.\n          </td>\n          <td>\n            <Link to='/data5.zip' target='_blank' download>\n              data5.zip\n            </Link>\n          </td>\n        </tr>\n      </table>\n    </div>\n  );\n};\nconst mapStateToProps = state => {\n  return { auth: state.auth };\n};\nexport default connect(mapStateToProps)(DatasetScreen);\n","/Users/norman/Desktop/project-ryde/frontend/src/screens/DashboardScreen.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/screens/ProjectsScreen.js",["55"],"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  TableHead,\n  TableRow,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  Snackbar\n} from '@material-ui/core';\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { Alert } from '@material-ui/lab';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\nconst ProjectsScreen = props => {\n  const classes = useStyles();\n  const [projects, setProjects] = useState([]);\n  const [currProj, setCurrProj] = useState({\n    creator: '',\n    projectName: '',\n    description: '',\n    HW1Amt: 0,\n    HW2Amt: 0,\n    access: false\n  });\n  const [hardware1, setHardware1] = useState(0);\n  const [hardware2, setHardware2] = useState(0);\n\n  const [hw1Curr, sethw1Curr] = useState(0);\n  const [hw2Curr, sethw2Curr] = useState(0);\n  const [hw1Av, sethw1Av] = useState(0);\n  const [hw2Av, sethw2Av] = useState(0);\n\n  const handleOnSubmit = async () => {\n    if (name !== '' && description !== '') {\n      await axios.post('/api/create', {\n        projectName: name,\n        description,\n        creator: props.auth.email\n      });\n      window.location.reload();\n      setSuccessMessage('Project created!');\n    } else {\n      setErrorMessage('Please fill out all fields.');\n    }\n  };\n  useEffect(() => {\n    axios.get('/api/projects').then(projects => {\n      setProjects(projects.data);\n    });\n    axios.get('/api/hardware/1').then(hw => sethw1Av(hw.data.available));\n    axios.get('/api/hardware/2').then(hw => sethw2Av(hw.data.available));\n    projects.forEach(project => {\n      if (project._id === currProj.id) {\n        sethw1Curr(project.HW1Amt);\n        sethw2Curr(project.HW2Amt);\n      }\n    });\n  }, [props.auth, currProj]);\n\n  const displayCurrProj = project => {\n    setCurrProj({\n      ...currProj,\n      creator: project.creator,\n      projectName: project.projectName,\n      description: project.description,\n      HW1Amt: project.HW1Amt,\n      HW2Amt: project.HW2Amt,\n      access: project.access,\n      id: project._id\n    });\n  };\n  const updateAmounts = (hw1Curr, hw2Curr, hw1Av, hw2Av) => {\n    sethw1Curr(hw1Curr);\n    sethw2Curr(hw2Curr);\n    sethw1Av(hw1Av);\n    sethw2Av(hw2Av);\n  };\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorSnackbar, setErrorSnackbar] = useState('');\n  const [successSnackbar, setSuccessSnackbar] = useState('');\n  const handleMakeChanges = () => {\n    if (hw1Curr < 0 || hw2Curr < 0) {\n      setErrorSnackbar('You returned too many sets');\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } else if (hw1Av < 0 || hw2Av < 0) {\n      setErrorSnackbar('You checked out too many sets');\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } else {\n      axios.post('/api/projects/count', { id: currProj.id, hw1Curr, hw2Curr });\n      axios.post('/api/hardware/count', {\n        hardware1,\n        hardware2\n      });\n      setHardware1(0);\n      setHardware2(0);\n      setSuccessSnackbar('Submitted successfully!');\n    }\n  };\n  return (\n    <Grid container spacing={1}>\n      {!props.auth ? <Redirect to='/login' /> : <Redirect to='/projects' />}\n\n      <Grid container item xs={12} spacing={3}>\n        <React.Fragment>\n          <Grid item xs={4}>\n            <Paper className={classes.paper}>\n              <TextField\n                variant='outlined'\n                margin='normal'\n                required\n                fullWidth\n                id='Project Name'\n                label='Project Name'\n                name='Project Name'\n                onChange={e => setName(e.target.value)}\n              />\n              <TextField\n                variant='outlined'\n                margin='normal'\n                required\n                fullWidth\n                id='Project Description'\n                label='Project Description'\n                name='Project Description'\n                onChange={e => setDescription(e.target.value)}\n              />\n              <Button onClick={handleOnSubmit}>\n                Create New Project <AddToPhotosIcon />\n              </Button>\n              {errorMessage ? (\n                <Alert\n                  className={classes.submit}\n                  style={{\n                    width: '100%',\n                    justifyContent: 'center'\n                  }}\n                  severity='error'\n                >\n                  {errorMessage}\n                </Alert>\n              ) : null}\n              {successMessage ? (\n                <Alert\n                  className={classes.submit}\n                  style={{\n                    width: '100%',\n                    justifyContent: 'center'\n                  }}\n                  severity='success'\n                >\n                  {successMessage}\n                </Alert>\n              ) : null}\n            </Paper>\n          </Grid>\n          <Grid item xs={8}>\n            <Paper className={classes.paper}>\n              <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label='simple table'>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell align='right'>Project Name</TableCell>\n                      <TableCell align='right'>Project Description</TableCell>\n                      <TableCell align='right'>Creator</TableCell>\n                      <TableCell align='right'>ID</TableCell>\n                      <TableCell align='right'>Link</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {projects.map(project => (\n                      <TableRow key={project.projectName}>\n                        <TableCell component='th' scope='row'>\n                          {project.projectName}\n                        </TableCell>\n                        <TableCell align='right'>\n                          {project.description}\n                        </TableCell>\n                        <TableCell align='right'>{project.creator}</TableCell>\n                        <TableCell align='right'>{project._id}</TableCell>\n                        <Button\n                          variant='contained'\n                          color='primary'\n                          onClick={() => displayCurrProj(project)}\n                        >\n                          Open\n                        </Button>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n            {currProj.projectName ? (\n              <div>\n                <p>\n                  Creator: {currProj.creator}, ID: {currProj.id}\n                </p>\n                <div>\n                  <button\n                    onClick={() => {\n                      setHardware1(hardware1 => hardware1 + 1);\n                      updateAmounts(hw1Curr - 1, hw2Curr, hw1Av + 1, hw2Av);\n                    }}\n                  >\n                    Return (-1)\n                  </button>\n                  <button\n                    onClick={() => {\n                      setHardware1(hardware1 => hardware1 - 1);\n\n                      updateAmounts(hw1Curr + 1, hw2Curr, hw1Av - 1, hw2Av);\n                    }}\n                  >\n                    Check Out (+1){' '}\n                  </button>\n                  <p>HWSet1 Checked Out: {hw1Curr}</p>\n                </div>\n                <div>\n                  <button\n                    onClick={() => {\n                      setHardware2(hardware2 => hardware2 + 1);\n\n                      updateAmounts(hw1Curr, hw2Curr - 1, hw1Av, hw2Av + 1);\n                    }}\n                  >\n                    Return (-1)\n                  </button>\n                  <button\n                    onClick={() => {\n                      setHardware2(hardware2 => hardware2 - 1);\n\n                      updateAmounts(hw1Curr, hw2Curr + 1, hw1Av, hw2Av - 1);\n                    }}\n                  >\n                    Check Out (+1)\n                  </button>\n                  <p>HWSet2 Checked Out: {hw2Curr}</p>\n                </div>\n                <p>HWSet1 Available: {hw1Av}</p>\n                <p>HWSet2 Available: {hw2Av}</p>\n                <button onClick={handleMakeChanges}>Make Changes</button>\n              </div>\n            ) : null}\n          </Grid>\n        </React.Fragment>\n      </Grid>\n      {successSnackbar ? (\n        <Snackbar\n          open\n          autoHideDuration={6000}\n          onClose={() => {\n            setSuccessSnackbar('');\n          }}\n        >\n          <Alert autoHideDuration={100} severity='success'>\n            {successSnackbar}\n          </Alert>\n        </Snackbar>\n      ) : null}\n      {errorSnackbar ? (\n        <Snackbar\n          open\n          autoHideDuration={6000}\n          onClose={() => {\n            setErrorSnackbar('');\n          }}\n        >\n          <Alert autoHideDuration={100} severity='error'>\n            {errorSnackbar}\n          </Alert>\n        </Snackbar>\n      ) : null}\n    </Grid>\n  );\n};\nconst mapStateToProps = state => {\n  return { auth: state.auth };\n};\nexport default connect(mapStateToProps)(ProjectsScreen);\n","/Users/norman/Desktop/project-ryde/frontend/src/screens/RegisterScreen.js",["56","57"],"import React, { useState, useEffect } from 'react';\nimport { Alert } from '@material-ui/lab';\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Link,\n  Grid,\n  Typography,\n  Container\n} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { useHistory } from 'react-router';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nfunction RegisterScreen(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [matchingPassword, setMatchingPassword] = useState(true);\n  const handleOnSubmit = async () => {\n    let { data } = await axios.post('/api/register', {\n      firstName,\n      lastName,\n      email,\n      password\n    });\n    if (data.redirectUrl) {\n      history.push(data.redirectUrl);\n    } else {\n      if (data.message) {\n        setErrorMessage(data.message);\n      }\n    }\n  };\n  useEffect(() => {\n    if (password !== '' && confirmPassword !== '') {\n      if (password !== confirmPassword) {\n        setErrorMessage('Passwords do not match');\n      } else {\n        setErrorMessage('');\n      }\n    }\n  }, [confirmPassword, password]);\n  return (\n    <Container component='main' maxWidth='xs'>\n      {!props.auth ? <Redirect to='/register' /> : <Redirect to='/projects' />}\n\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component='h1' variant='h5'>\n          Sign up\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              autoComplete='fname'\n              name='firstName'\n              variant='outlined'\n              required\n              fullWidth\n              id='firstName'\n              label='First Name'\n              autoFocus\n              onChange={e => setFirstName(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              variant='outlined'\n              required\n              fullWidth\n              id='lastName'\n              label='Last Name'\n              name='lastName'\n              autoComplete='lname'\n              onChange={e => setLastName(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant='outlined'\n              required\n              fullWidth\n              id='email'\n              label='Email Address'\n              name='email'\n              autoComplete='email'\n              onChange={e => setEmail(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant='outlined'\n              required\n              fullWidth\n              name='password'\n              label='Password'\n              type='password'\n              id='password'\n              autoComplete='current-password'\n              onChange={e => setPassword(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant='outlined'\n              required\n              fullWidth\n              name='confirmPassword'\n              label='Confirm Password'\n              type='password'\n              id='confirmPassword'\n              onChange={e => setConfirmPassword(e.target.value)}\n            />\n          </Grid>\n        </Grid>\n        <Button\n          type='submit'\n          fullWidth\n          variant='contained'\n          color='primary'\n          className={classes.submit}\n          onClick={handleOnSubmit}\n        >\n          Sign Up\n        </Button>\n        {errorMessage ? (\n          <Alert\n            className={classes.submit}\n            style={{\n              width: '100%',\n              justifyContent: 'center'\n            }}\n            severity='error'\n          >\n            {errorMessage}\n          </Alert>\n        ) : null}\n        <Link href='/login' variant='body2'>\n          Already have an account?\n        </Link>\n      </div>\n    </Container>\n  );\n}\n\nconst mapStateToProps = state => {\n  return { auth: state.auth };\n};\nexport default connect(mapStateToProps)(RegisterScreen);\n","/Users/norman/Desktop/project-ryde/frontend/src/screens/LoginScreen.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/components/NavBar.js",[],"/Users/norman/Desktop/project-ryde/frontend/src/reducers/authReducer.js",["58"],"export default function(state = null, action) {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return action.payload || false;\n    default:\n      return state;\n  }\n}\n","/Users/norman/Desktop/project-ryde/frontend/src/actions/index.js",[],["59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":4,"column":10,"nodeType":"67","messageId":"68","endLine":4,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":85,"column":6,"nodeType":"71","endLine":85,"endColumn":28,"suggestions":"72"},{"ruleId":"65","severity":1,"message":"73","line":49,"column":10,"nodeType":"67","messageId":"68","endLine":49,"endColumn":26},{"ruleId":"65","severity":1,"message":"74","line":49,"column":28,"nodeType":"67","messageId":"68","endLine":49,"endColumn":47},{"ruleId":"75","severity":1,"message":"76","line":1,"column":1,"nodeType":"77","endLine":8,"endColumn":2},{"ruleId":"61","replacedBy":"78"},{"ruleId":"63","replacedBy":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'projects'. Either include it or remove the dependency array.","ArrayExpression",["82"],"'matchingPassword' is assigned a value but never used.","'setMatchingPassword' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["80"],["81"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [props.auth, currProj, projects]",{"range":"85","text":"86"},[2211,2233],"[props.auth, currProj, projects]"]
